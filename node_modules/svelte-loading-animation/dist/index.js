(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.LoadingAnimation = {}));
}(this, (function (exports) { 'use strict';

    function noop() { }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function element(name) {
        return document.createElement(name);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function mount_component(component, target, anchor) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const prop_values = options.props || {};
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, prop_values, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    /* src/Bars.svelte generated by Svelte v3.31.2 */

    function add_css() {
    	var style = element("style");
    	style.id = "svelte-pw7sfj-style";
    	style.textContent = ".bars.svelte-pw7sfj.svelte-pw7sfj{display:inline-flex;position:relative;width:var(--size);height:var(--size)}.bars.svelte-pw7sfj div.svelte-pw7sfj{display:inline-flex;position:absolute;left:calc(var(--size) * .1);width:calc(var(--size) * .2);background:var(--color);animation:svelte-pw7sfj-bars 1.2s cubic-bezier(0, 0.5, 0.5, 1) infinite}.bars.svelte-pw7sfj div.svelte-pw7sfj:nth-child(1){left:calc(var(--size) * .1);animation-delay:-0.24s}.bars.svelte-pw7sfj div.svelte-pw7sfj:nth-child(2){left:calc(var(--size) * .4);animation-delay:-0.12s}.bars.svelte-pw7sfj div.svelte-pw7sfj:nth-child(3){left:calc(var(--size) * .7);animation-delay:0}@keyframes svelte-pw7sfj-bars{0%{top:calc(var(--size) * .1);height:calc(var(--size) * .8)}50%,100%{top:calc(var(--size) * .3);height:calc(var(--size) * .4)}}";
    	append(document.head, style);
    }

    function create_fragment(ctx) {
    	let div3;
    	let div0;
    	let div1;
    	let div2;

    	return {
    		c() {
    			div3 = element("div");
    			div0 = element("div");
    			div1 = element("div");
    			div2 = element("div");
    			attr(div0, "class", "svelte-pw7sfj");
    			attr(div1, "class", "svelte-pw7sfj");
    			attr(div2, "class", "svelte-pw7sfj");
    			attr(div3, "class", "bars svelte-pw7sfj");
    			set_style(div3, "--color", /*color*/ ctx[1]);
    			set_style(div3, "--size", /*size*/ ctx[0]);
    		},
    		m(target, anchor) {
    			insert(target, div3, anchor);
    			append(div3, div0);
    			append(div3, div1);
    			append(div3, div2);
    		},
    		p(ctx, [dirty]) {
    			if (dirty & /*color*/ 2) {
    				set_style(div3, "--color", /*color*/ ctx[1]);
    			}

    			if (dirty & /*size*/ 1) {
    				set_style(div3, "--size", /*size*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(div3);
    		}
    	};
    }

    function instance($$self, $$props, $$invalidate) {
    	let { size = "64px" } = $$props;
    	let { color = "#ff3e00" } = $$props;

    	$$self.$$set = $$props => {
    		if ("size" in $$props) $$invalidate(0, size = $$props.size);
    		if ("color" in $$props) $$invalidate(1, color = $$props.color);
    	};

    	return [size, color];
    }

    class Bars extends SvelteComponent {
    	constructor(options) {
    		super();
    		if (!document.getElementById("svelte-pw7sfj-style")) add_css();
    		init(this, options, instance, create_fragment, safe_not_equal, { size: 0, color: 1 });
    	}
    }

    /* src/Coin.svelte generated by Svelte v3.31.2 */

    function add_css$1() {
    	var style = element("style");
    	style.id = "svelte-10udm78-style";
    	style.textContent = ".coin.svelte-10udm78.svelte-10udm78{display:inline-flex;justify-content:center;align-items:center;width:var(--size);height:var(--size);transform:translateZ(calc(var(--size) * .0125))}.coin.svelte-10udm78 div.svelte-10udm78{width:calc(var(--size) * .8);height:calc(var(--size) * .8);margin:calc(var(--size) * .05);border-radius:50%;animation:svelte-10udm78-flipping 2.4s cubic-bezier(0, 0.2, 0.8, 1) infinite;background:var(--color)\n}@keyframes svelte-10udm78-flipping{0%,100%{animation-timing-function:cubic-bezier(0.5, 0, 1, 0.5)}0%{transform:rotateY(0deg)}50%{transform:rotateY(1800deg);animation-timing-function:cubic-bezier(0, 0.5, 0.5, 1)}100%{transform:rotateY(3600deg)}}";
    	append(document.head, style);
    }

    function create_fragment$1(ctx) {
    	let div1;
    	let div0;

    	return {
    		c() {
    			div1 = element("div");
    			div0 = element("div");
    			attr(div0, "class", "svelte-10udm78");
    			attr(div1, "class", "coin svelte-10udm78");
    			set_style(div1, "--size", /*size*/ ctx[0]);
    			set_style(div1, "--color", /*color*/ ctx[1]);
    		},
    		m(target, anchor) {
    			insert(target, div1, anchor);
    			append(div1, div0);
    		},
    		p(ctx, [dirty]) {
    			if (dirty & /*size*/ 1) {
    				set_style(div1, "--size", /*size*/ ctx[0]);
    			}

    			if (dirty & /*color*/ 2) {
    				set_style(div1, "--color", /*color*/ ctx[1]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(div1);
    		}
    	};
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let { size = "64px" } = $$props;
    	let { color = "#ff3e00" } = $$props;

    	$$self.$$set = $$props => {
    		if ("size" in $$props) $$invalidate(0, size = $$props.size);
    		if ("color" in $$props) $$invalidate(1, color = $$props.color);
    	};

    	return [size, color];
    }

    class Coin extends SvelteComponent {
    	constructor(options) {
    		super();
    		if (!document.getElementById("svelte-10udm78-style")) add_css$1();
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, { size: 0, color: 1 });
    	}
    }

    /* src/Ellipsis.svelte generated by Svelte v3.31.2 */

    function add_css$2() {
    	var style = element("style");
    	style.id = "svelte-1el78je-style";
    	style.textContent = ".ellipsis.svelte-1el78je.svelte-1el78je{display:inline-flex;position:relative;width:var(--size);height:var(--size)}.ellipsis.svelte-1el78je div.svelte-1el78je{position:absolute;top:calc(var(--size) * .4125);width:calc(var(--size) * .1625);height:calc(var(--size) * .1625);border-radius:50%;background:var(--color);animation-timing-function:cubic-bezier(0, 1, 1, 0)}.ellipsis.svelte-1el78je div.svelte-1el78je:nth-child(1){left:calc(var(--size) * .1);animation:svelte-1el78je-ellipsis1 0.6s infinite}.ellipsis.svelte-1el78je div.svelte-1el78je:nth-child(2){left:calc(var(--size) * .1);animation:svelte-1el78je-ellipsis2 0.6s infinite}.ellipsis.svelte-1el78je div.svelte-1el78je:nth-child(3){left:calc(var(--size) * .4);animation:svelte-1el78je-ellipsis2 0.6s infinite}.ellipsis.svelte-1el78je div.svelte-1el78je:nth-child(4){left:calc(var(--size) * .7);animation:svelte-1el78je-ellipsis3 0.6s infinite}@keyframes svelte-1el78je-ellipsis1{0%{transform:scale(0)}100%{transform:scale(1)}}@keyframes svelte-1el78je-ellipsis3{0%{transform:scale(1)}100%{transform:scale(0)}}@keyframes svelte-1el78je-ellipsis2{0%{transform:translate(0, 0)}100%{transform:translate(calc(var(--size) * .3), 0)}}";
    	append(document.head, style);
    }

    function create_fragment$2(ctx) {
    	let div4;
    	let div0;
    	let div1;
    	let div2;
    	let div3;

    	return {
    		c() {
    			div4 = element("div");
    			div0 = element("div");
    			div1 = element("div");
    			div2 = element("div");
    			div3 = element("div");
    			attr(div0, "class", "svelte-1el78je");
    			attr(div1, "class", "svelte-1el78je");
    			attr(div2, "class", "svelte-1el78je");
    			attr(div3, "class", "svelte-1el78je");
    			attr(div4, "class", "ellipsis svelte-1el78je");
    			set_style(div4, "--size", /*size*/ ctx[0]);
    			set_style(div4, "--color", /*color*/ ctx[1]);
    		},
    		m(target, anchor) {
    			insert(target, div4, anchor);
    			append(div4, div0);
    			append(div4, div1);
    			append(div4, div2);
    			append(div4, div3);
    		},
    		p(ctx, [dirty]) {
    			if (dirty & /*size*/ 1) {
    				set_style(div4, "--size", /*size*/ ctx[0]);
    			}

    			if (dirty & /*color*/ 2) {
    				set_style(div4, "--color", /*color*/ ctx[1]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(div4);
    		}
    	};
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { size = "64px" } = $$props;
    	let { color = "#ff3e00" } = $$props;

    	$$self.$$set = $$props => {
    		if ("size" in $$props) $$invalidate(0, size = $$props.size);
    		if ("color" in $$props) $$invalidate(1, color = $$props.color);
    	};

    	return [size, color];
    }

    class Ellipsis extends SvelteComponent {
    	constructor(options) {
    		super();
    		if (!document.getElementById("svelte-1el78je-style")) add_css$2();
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, { size: 0, color: 1 });
    	}
    }

    /* src/HourGlass.svelte generated by Svelte v3.31.2 */

    function add_css$3() {
    	var style = element("style");
    	style.id = "svelte-1alst1-style";
    	style.textContent = ".hourglass.svelte-1alst1.svelte-1alst1{display:inline-flex;align-items:center;justify-content:center;height:var(--size);width:var(--size)}.hourglass.svelte-1alst1 div.svelte-1alst1{height:calc(var(--size) * .625);width:calc(var(--size) * .625);animation:svelte-1alst1-hourglass 5s cubic-bezier(.8,0,.2,1) infinite}.hourglass.svelte-1alst1 div div.svelte-1alst1:nth-child(1){animation:svelte-1alst1-top 5s linear infinite;border-top:calc(var(--size) * .3125) solid var(--color);border-right:calc(var(--size) * .3125) solid transparent;border-left:calc(var(--size) * .3125) solid transparent;height:0px;width:1px;transform-origin:50% 100%}.hourglass.svelte-1alst1 div div.svelte-1alst1:nth-child(2){animation:svelte-1alst1-bottom 5s linear infinite;border-right:calc(var(--size) * .3125) solid transparent;border-bottom:calc(var(--size) * .3125) solid var(--color);border-left:calc(var(--size) * .3125) solid transparent;height:0px;width:1px;transform:scale(0);transform-origin:50% 100%}.hourglass.svelte-1alst1 div div.svelte-1alst1:nth-child(3){animation:svelte-1alst1-sand 5s linear infinite;border-left:1px dotted var(--color);height:0px;width:0px;position:absolute;top:calc(var(--size) * .3125);left:calc(var(--size) * .3125)}@keyframes svelte-1alst1-hourglass{90%{transform:rotate(0deg)}100%{transform:rotate(180deg)}}@keyframes svelte-1alst1-top{90%{transform:scale(0)}100%{transform:scale(0)}}@keyframes svelte-1alst1-bottom{10%{transform:scale(0)}90%{transform:scale(1)}100%{transform:scale(1)}}@keyframes svelte-1alst1-sand{10%{height:calc(var(--size) * .3125)}100%{height:calc(var(--size) * .3125)}}";
    	append(document.head, style);
    }

    function create_fragment$3(ctx) {
    	let div4;
    	let div3;

    	return {
    		c() {
    			div4 = element("div");
    			div3 = element("div");
    			div3.innerHTML = `<div class="svelte-1alst1"></div><div class="svelte-1alst1"></div><div class="svelte-1alst1"></div>`;
    			attr(div3, "class", "svelte-1alst1");
    			attr(div4, "class", "hourglass svelte-1alst1");
    			set_style(div4, "--color", /*color*/ ctx[1]);
    			set_style(div4, "--size", /*size*/ ctx[0]);
    		},
    		m(target, anchor) {
    			insert(target, div4, anchor);
    			append(div4, div3);
    		},
    		p(ctx, [dirty]) {
    			if (dirty & /*color*/ 2) {
    				set_style(div4, "--color", /*color*/ ctx[1]);
    			}

    			if (dirty & /*size*/ 1) {
    				set_style(div4, "--size", /*size*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(div4);
    		}
    	};
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { size = "64px" } = $$props;
    	let { color = "#ff3e00" } = $$props;

    	$$self.$$set = $$props => {
    		if ("size" in $$props) $$invalidate(0, size = $$props.size);
    		if ("color" in $$props) $$invalidate(1, color = $$props.color);
    	};

    	return [size, color];
    }

    class HourGlass extends SvelteComponent {
    	constructor(options) {
    		super();
    		if (!document.getElementById("svelte-1alst1-style")) add_css$3();
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, { size: 0, color: 1 });
    	}
    }

    /* src/Ring.svelte generated by Svelte v3.31.2 */

    function add_css$4() {
    	var style = element("style");
    	style.id = "svelte-yqxh44-style";
    	style.textContent = ".ring.svelte-yqxh44.svelte-yqxh44{display:inline-flex;justify-content:center;align-items:center;width:var(--size);height:var(--size)\n}.ring.svelte-yqxh44 div.svelte-yqxh44{width:calc(var(--size) * .8);height:calc(var(--size) * .8);box-sizing:border-box;display:block;position:absolute;margin:4px;border:calc(var(--size) * .125) solid var(--color);border-radius:50%;border-color:var(--color) transparent transparent transparent;animation:svelte-yqxh44-rotate 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite\n}.ring.svelte-yqxh44 div.svelte-yqxh44:nth-child(1){animation-delay:-0.45s\n}.ring.svelte-yqxh44 div.svelte-yqxh44:nth-child(2){animation-delay:-0.3s\n}.ring.svelte-yqxh44 div.svelte-yqxh44:nth-child(3){animation-delay:-0.15s\n}@keyframes svelte-yqxh44-rotate{0%{transform:rotate(0deg)\n  }100%{transform:rotate(360deg)\n  }}";
    	append(document.head, style);
    }

    function create_fragment$4(ctx) {
    	let div4;
    	let div0;
    	let div1;
    	let div2;
    	let div3;

    	return {
    		c() {
    			div4 = element("div");
    			div0 = element("div");
    			div1 = element("div");
    			div2 = element("div");
    			div3 = element("div");
    			attr(div0, "class", "svelte-yqxh44");
    			attr(div1, "class", "svelte-yqxh44");
    			attr(div2, "class", "svelte-yqxh44");
    			attr(div3, "class", "svelte-yqxh44");
    			attr(div4, "class", "ring svelte-yqxh44");
    			set_style(div4, "--color", /*color*/ ctx[1]);
    			set_style(div4, "--size", /*size*/ ctx[0]);
    		},
    		m(target, anchor) {
    			insert(target, div4, anchor);
    			append(div4, div0);
    			append(div4, div1);
    			append(div4, div2);
    			append(div4, div3);
    		},
    		p(ctx, [dirty]) {
    			if (dirty & /*color*/ 2) {
    				set_style(div4, "--color", /*color*/ ctx[1]);
    			}

    			if (dirty & /*size*/ 1) {
    				set_style(div4, "--size", /*size*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(div4);
    		}
    	};
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { size = "64px" } = $$props;
    	let { color = "#ff3e00" } = $$props;

    	$$self.$$set = $$props => {
    		if ("size" in $$props) $$invalidate(0, size = $$props.size);
    		if ("color" in $$props) $$invalidate(1, color = $$props.color);
    	};

    	return [size, color];
    }

    class Ring extends SvelteComponent {
    	constructor(options) {
    		super();
    		if (!document.getElementById("svelte-yqxh44-style")) add_css$4();
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, { size: 0, color: 1 });
    	}
    }

    /* src/Ripple.svelte generated by Svelte v3.31.2 */

    function add_css$5() {
    	var style = element("style");
    	style.id = "svelte-137jd28-style";
    	style.textContent = ".ripple.svelte-137jd28.svelte-137jd28{display:inline-flex;position:relative;width:var(--size);height:var(--size)\n  }.ripple.svelte-137jd28 div.svelte-137jd28{position:absolute;border:calc(var(--size) * .075) solid var(--color);opacity:1;border-radius:50%;animation:svelte-137jd28-ripple 1s cubic-bezier(0, 0.2, 0.8, 1) infinite\n  }.ripple.svelte-137jd28 div.svelte-137jd28:nth-child(2){animation-delay:-0.5s}@keyframes svelte-137jd28-ripple{0%{top:calc(var(--size) * .45);left:calc(var(--size) * .45);width:0;height:0;opacity:1}100%{top:0px;left:0px;width:calc(var(--size) * .9);height:calc(var(--size) * .9);opacity:0}}";
    	append(document.head, style);
    }

    function create_fragment$5(ctx) {
    	let div2;
    	let div0;
    	let div1;

    	return {
    		c() {
    			div2 = element("div");
    			div0 = element("div");
    			div1 = element("div");
    			attr(div0, "class", "svelte-137jd28");
    			attr(div1, "class", "svelte-137jd28");
    			attr(div2, "class", "ripple svelte-137jd28");
    			set_style(div2, "--size", /*size*/ ctx[0]);
    			set_style(div2, "--color", /*color*/ ctx[1]);
    		},
    		m(target, anchor) {
    			insert(target, div2, anchor);
    			append(div2, div0);
    			append(div2, div1);
    		},
    		p(ctx, [dirty]) {
    			if (dirty & /*size*/ 1) {
    				set_style(div2, "--size", /*size*/ ctx[0]);
    			}

    			if (dirty & /*color*/ 2) {
    				set_style(div2, "--color", /*color*/ ctx[1]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(div2);
    		}
    	};
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let { size = "64px" } = $$props;
    	let { color = "#ff3e00" } = $$props;

    	$$self.$$set = $$props => {
    		if ("size" in $$props) $$invalidate(0, size = $$props.size);
    		if ("color" in $$props) $$invalidate(1, color = $$props.color);
    	};

    	return [size, color];
    }

    class Ripple extends SvelteComponent {
    	constructor(options) {
    		super();
    		if (!document.getElementById("svelte-137jd28-style")) add_css$5();
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, { size: 0, color: 1 });
    	}
    }

    /* src/Spinner.svelte generated by Svelte v3.31.2 */

    function add_css$6() {
    	var style = element("style");
    	style.id = "svelte-eitjuf-style";
    	style.textContent = ".spinner.svelte-eitjuf.svelte-eitjuf{display:inline-flex;position:relative;width:var(--size);height:var(--size)\n  }.spinner.svelte-eitjuf div.svelte-eitjuf{transform-origin:calc(var(--size) * .5) calc(var(--size) * .5);animation:svelte-eitjuf-spinner 1.2s linear infinite\n  }.spinner.svelte-eitjuf div.svelte-eitjuf:after{content:\" \";display:block;position:absolute;top:calc(var(--size) * .0375);left:calc(var(--size) * .4625);width:calc(var(--size) * .075);height:calc(var(--size) * .225);border-radius:20%;background:var(--color)}.spinner.svelte-eitjuf div.svelte-eitjuf:nth-child(1){transform:rotate(0deg);animation-delay:-1.1s}.spinner.svelte-eitjuf div.svelte-eitjuf:nth-child(2){transform:rotate(30deg);animation-delay:-1s}.spinner.svelte-eitjuf div.svelte-eitjuf:nth-child(3){transform:rotate(60deg);animation-delay:-0.9s}.spinner.svelte-eitjuf div.svelte-eitjuf:nth-child(4){transform:rotate(90deg);animation-delay:-0.8s}.spinner.svelte-eitjuf div.svelte-eitjuf:nth-child(5){transform:rotate(120deg);animation-delay:-0.7s}.spinner.svelte-eitjuf div.svelte-eitjuf:nth-child(6){transform:rotate(150deg);animation-delay:-0.6s}.spinner.svelte-eitjuf div.svelte-eitjuf:nth-child(7){transform:rotate(180deg);animation-delay:-0.5s}.spinner.svelte-eitjuf div.svelte-eitjuf:nth-child(8){transform:rotate(210deg);animation-delay:-0.4s}.spinner.svelte-eitjuf div.svelte-eitjuf:nth-child(9){transform:rotate(240deg);animation-delay:-0.3s}.spinner.svelte-eitjuf div.svelte-eitjuf:nth-child(10){transform:rotate(270deg);animation-delay:-0.2s}.spinner.svelte-eitjuf div.svelte-eitjuf:nth-child(11){transform:rotate(300deg);animation-delay:-0.1s}.spinner.svelte-eitjuf div.svelte-eitjuf:nth-child(12){transform:rotate(330deg);animation-delay:0s}@keyframes svelte-eitjuf-spinner{0%{opacity:1}100%{opacity:0}}";
    	append(document.head, style);
    }

    function create_fragment$6(ctx) {
    	let div12;
    	let div0;
    	let div1;
    	let div2;
    	let div3;
    	let div4;
    	let div5;
    	let div6;
    	let div7;
    	let div8;
    	let div9;
    	let div10;
    	let div11;

    	return {
    		c() {
    			div12 = element("div");
    			div0 = element("div");
    			div1 = element("div");
    			div2 = element("div");
    			div3 = element("div");
    			div4 = element("div");
    			div5 = element("div");
    			div6 = element("div");
    			div7 = element("div");
    			div8 = element("div");
    			div9 = element("div");
    			div10 = element("div");
    			div11 = element("div");
    			attr(div0, "class", "svelte-eitjuf");
    			attr(div1, "class", "svelte-eitjuf");
    			attr(div2, "class", "svelte-eitjuf");
    			attr(div3, "class", "svelte-eitjuf");
    			attr(div4, "class", "svelte-eitjuf");
    			attr(div5, "class", "svelte-eitjuf");
    			attr(div6, "class", "svelte-eitjuf");
    			attr(div7, "class", "svelte-eitjuf");
    			attr(div8, "class", "svelte-eitjuf");
    			attr(div9, "class", "svelte-eitjuf");
    			attr(div10, "class", "svelte-eitjuf");
    			attr(div11, "class", "svelte-eitjuf");
    			attr(div12, "class", "spinner svelte-eitjuf");
    			set_style(div12, "--size", /*size*/ ctx[0]);
    			set_style(div12, "--color", /*color*/ ctx[1]);
    		},
    		m(target, anchor) {
    			insert(target, div12, anchor);
    			append(div12, div0);
    			append(div12, div1);
    			append(div12, div2);
    			append(div12, div3);
    			append(div12, div4);
    			append(div12, div5);
    			append(div12, div6);
    			append(div12, div7);
    			append(div12, div8);
    			append(div12, div9);
    			append(div12, div10);
    			append(div12, div11);
    		},
    		p(ctx, [dirty]) {
    			if (dirty & /*size*/ 1) {
    				set_style(div12, "--size", /*size*/ ctx[0]);
    			}

    			if (dirty & /*color*/ 2) {
    				set_style(div12, "--color", /*color*/ ctx[1]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(div12);
    		}
    	};
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { size = "64px" } = $$props;
    	let { color = "#ff3e00" } = $$props;

    	$$self.$$set = $$props => {
    		if ("size" in $$props) $$invalidate(0, size = $$props.size);
    		if ("color" in $$props) $$invalidate(1, color = $$props.color);
    	};

    	return [size, color];
    }

    class Spinner extends SvelteComponent {
    	constructor(options) {
    		super();
    		if (!document.getElementById("svelte-eitjuf-style")) add_css$6();
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, { size: 0, color: 1 });
    	}
    }

    exports.LoadBars = Bars;
    exports.LoadCoin = Coin;
    exports.LoadEllipsis = Ellipsis;
    exports.LoadHourGlass = HourGlass;
    exports.LoadRing = Ring;
    exports.LoadRipple = Ripple;
    exports.LoadSpinner = Spinner;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
